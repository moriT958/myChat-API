// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package postgres

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :exec
INSERT INTO posts (uuid, body, thread_id, created_at) VALUES ($1, $2, $3, $4)
`

type CreatePostParams struct {
	Uuid      uuid.UUID
	Body      string
	ThreadID  int32
	CreatedAt time.Time
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) error {
	_, err := q.db.ExecContext(ctx, createPost,
		arg.Uuid,
		arg.Body,
		arg.ThreadID,
		arg.CreatedAt,
	)
	return err
}

const getPostsByThreadId = `-- name: GetPostsByThreadId :many
SELECT uuid, body, created_at FROM posts WHERE thread_id = $1
`

type GetPostsByThreadIdRow struct {
	Uuid      uuid.UUID
	Body      string
	CreatedAt time.Time
}

func (q *Queries) GetPostsByThreadId(ctx context.Context, threadID int32) ([]GetPostsByThreadIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsByThreadId, threadID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsByThreadIdRow
	for rows.Next() {
		var i GetPostsByThreadIdRow
		if err := rows.Scan(&i.Uuid, &i.Body, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getThreadIdByUuid = `-- name: GetThreadIdByUuid :one
SELECT id FROM threads WHERE uuid = $1
`

func (q *Queries) GetThreadIdByUuid(ctx context.Context, argUuid uuid.UUID) (int32, error) {
	row := q.db.QueryRowContext(ctx, getThreadIdByUuid, argUuid)
	var id int32
	err := row.Scan(&id)
	return id, err
}
