// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package query

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :exec
INSERT INTO posts (uuid, body, thread_id, created_at, user_id) VALUES ($1, $2, $3, $4, $5)
`

type CreatePostParams struct {
	Uuid      uuid.UUID
	Body      string
	ThreadID  int32
	CreatedAt time.Time
	UserID    int32
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) error {
	_, err := q.db.ExecContext(ctx, createPost,
		arg.Uuid,
		arg.Body,
		arg.ThreadID,
		arg.CreatedAt,
		arg.UserID,
	)
	return err
}

const createThread = `-- name: CreateThread :exec
INSERT INTO threads (uuid, topic, created_at, user_id) VALUES ($1, $2, $3, $4)
`

type CreateThreadParams struct {
	Uuid      uuid.UUID
	Topic     string
	CreatedAt time.Time
	UserID    int32
}

func (q *Queries) CreateThread(ctx context.Context, arg CreateThreadParams) error {
	_, err := q.db.ExecContext(ctx, createThread,
		arg.Uuid,
		arg.Topic,
		arg.CreatedAt,
		arg.UserID,
	)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (uuid, username, password, created_at) VALUES ($1, $2, $3, $4)
`

type CreateUserParams struct {
	Uuid      uuid.UUID
	Username  string
	Password  string
	CreatedAt time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.Uuid,
		arg.Username,
		arg.Password,
		arg.CreatedAt,
	)
	return err
}

const getAllThreads = `-- name: GetAllThreads :many
SELECT id, uuid, topic, created_at, user_id FROM threads LIMIT $1 OFFSET $2
`

type GetAllThreadsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetAllThreads(ctx context.Context, arg GetAllThreadsParams) ([]Thread, error) {
	rows, err := q.db.QueryContext(ctx, getAllThreads, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Thread
	for rows.Next() {
		var i Thread
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.Topic,
			&i.CreatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostById = `-- name: GetPostById :one
SELECT id, uuid, body, thread_id, created_at, user_id FROM posts WHERE id = $1
`

func (q *Queries) GetPostById(ctx context.Context, id sql.NullInt32) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPostById, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Body,
		&i.ThreadID,
		&i.CreatedAt,
		&i.UserID,
	)
	return i, err
}

const getPostByThreadId = `-- name: GetPostByThreadId :many
SELECT id, uuid, body, thread_id, created_at, user_id FROM posts WHERE thread_id = $1
`

func (q *Queries) GetPostByThreadId(ctx context.Context, threadID int32) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPostByThreadId, threadID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.Body,
			&i.ThreadID,
			&i.CreatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostByUserId = `-- name: GetPostByUserId :many
SELECT id, uuid, body, thread_id, created_at, user_id FROM posts WHERE user_id = $1
`

func (q *Queries) GetPostByUserId(ctx context.Context, userID int32) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPostByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.Body,
			&i.ThreadID,
			&i.CreatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostByUuid = `-- name: GetPostByUuid :one
SELECT id, uuid, body, thread_id, created_at, user_id FROM posts WHERE uuid = $1
`

func (q *Queries) GetPostByUuid(ctx context.Context, argUuid uuid.UUID) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPostByUuid, argUuid)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Body,
		&i.ThreadID,
		&i.CreatedAt,
		&i.UserID,
	)
	return i, err
}

const getThreadById = `-- name: GetThreadById :one
SELECT id, uuid, topic, created_at, user_id FROM threads WHERE id = $1
`

func (q *Queries) GetThreadById(ctx context.Context, id int32) (Thread, error) {
	row := q.db.QueryRowContext(ctx, getThreadById, id)
	var i Thread
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Topic,
		&i.CreatedAt,
		&i.UserID,
	)
	return i, err
}

const getThreadByUserId = `-- name: GetThreadByUserId :many
SELECT id, uuid, topic, created_at, user_id FROM threads WHERE user_id = $1
`

func (q *Queries) GetThreadByUserId(ctx context.Context, userID int32) ([]Thread, error) {
	rows, err := q.db.QueryContext(ctx, getThreadByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Thread
	for rows.Next() {
		var i Thread
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.Topic,
			&i.CreatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getThreadByUuid = `-- name: GetThreadByUuid :one
SELECT id, uuid, topic, created_at, user_id FROM threads WHERE uuid = $1
`

func (q *Queries) GetThreadByUuid(ctx context.Context, argUuid uuid.UUID) (Thread, error) {
	row := q.db.QueryRowContext(ctx, getThreadByUuid, argUuid)
	var i Thread
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Topic,
		&i.CreatedAt,
		&i.UserID,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, uuid, username, password, created_at FROM users WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT id, uuid, username, password, created_at FROM users WHERE username = $1
`

func (q *Queries) GetUserByName(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByUuid = `-- name: GetUserByUuid :one
SELECT id, uuid, username, password, created_at FROM users WHERE uuid = $1
`

func (q *Queries) GetUserByUuid(ctx context.Context, argUuid uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUuid, argUuid)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}
